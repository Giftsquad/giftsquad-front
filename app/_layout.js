import AsyncStorage from '@react-native-async-storage/async-storage';
import { Slot } from 'expo-router';
import { ActivityIndicator, View } from 'react-native';

import { useEffect, useState } from 'react';
import AuthContext from '../contexts/AuthContext';
import { theme } from '../styles/theme';

// State user pour g√©rer l'utilisateur complet et savoir si on a fini d'initialiser
const RootLayout = () => {
  const [user, setUser] = useState(null);
  const [isInit, setIsInit] = useState(false);

  // Fonction login qui met √† jour le state local et sauvegarde seulement le token
  const login = async userData => {
    setUser(userData);
    await AsyncStorage.setItem('token', userData.token);
  };

  // Fonction logout qui r√©initialise le state et supprime le token stock√©
  const logout = async () => {
    setUser(null);
    await AsyncStorage.removeItem('token');
  };

  useEffect(() => {
    // Fonction lanc√©e au d√©marrage pour initialiser l'app
    const fetchAsyncItem = async () => {
      console.log("üîÑ Initialisation de l'application...");

      const token = await AsyncStorage.getItem('token');

      console.log('üì± Token r√©cup√©r√©:', token ? 'pr√©sent' : 'absent');

      // Si on trouve un token, on consid√®re que l'utilisateur est connect√©
      // La validation du token se fera automatiquement lors du prochain appel API
      if (token) {
        console.log('‚úÖ Token trouv√©, utilisateur consid√©r√© comme connect√©');
        // On met un objet temporaire avec le token pour indiquer la connexion
        // Les vraies donn√©es utilisateur seront r√©cup√©r√©es lors du prochain appel API
        setUser({ token });
      } else {
        console.log('‚ùå Aucun token trouv√©');
        setUser(null);
      }

      // Initialisation termin√©e
      setIsInit(true);
      console.log('‚úÖ Initialisation termin√©e');
    };

    fetchAsyncItem();
  }, []);

  // Pendant que isInit est false (donn√©es pas encore r√©cup√©r√©es), on affiche un loader
  if (!isInit) {
    return (
      <View
        style={[
          theme.components.screen.centerContent,
          { backgroundColor: theme.colors.background.primary },
        ]}
      >
        <ActivityIndicator size='large' color={theme.colors.primary} />
      </View>
    );
  }

  // Si les donn√©es ont bien √©t√© r√©cup√©r√©es, on fournit le contexte d'authentification (user, login, logout) √† toute l'application via <Slot />
  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      <Slot />
    </AuthContext.Provider>
  );
};

export default RootLayout;
